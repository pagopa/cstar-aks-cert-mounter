# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

parameters:
  - name: ENV
    displayName: K8S cluster ENV
    type: string
    default: DEV
    values:
      - DEV
      - UAT
      - PROD

pr: none
trigger: none

resources:
  - repo: self

variables:

  vmImageNameDefault: 'ubuntu-latest'

  deployNamespace: '$(TF_DEPLOY_NAMESPACE)'
  domain : '$(TF_DOMAIN)'
  canDeploy: true
  helmReleaseName: '$(TF_HELM_RELEASE_NAME)'

  # If the branch is develop or a feature branch starting with CEN, deploy in DEV environment
  ${{ if or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release-dev'), eq(parameters.ENV, 'DEV')) }}:
    environment: 'DEV'
    kubernetesServiceConnection: '$(TF_DEV_KUBERNETES_SERVICE_CONN)'
    selfHostedAgentPool: $(TF_DEV_AGENT_POOL)

  ${{ elseif or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release-uat'), eq(parameters.ENV, 'UAT')) }}:
    environment: 'UAT'
    kubernetesServiceConnection: '$(TF_UAT_KUBERNETES_SERVICE_CONN)'
    selfHostedAgentPool: $(TF_UAT_AGENT_POOL)

  ${{ elseif or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release-prod'), eq(parameters.ENV, 'PROD')) }}:
    environment: 'PROD'
    kubernetesServiceConnection: '$(TF_PROD_KUBERNETES_SERVICE_CONN)'
    selfHostedAgentPool: $(TF_PROD_AGENT_POOL)

  ${{ else }}:
    environment: 'DEV'
    kubernetesServiceConnection: '$(TF_DEV_KUBERNETES_SERVICE_CONN)'
    selfHostedAgentPool: $(TF_DEV_AGENT_POOL)

stages:

  - stage: 'deploy'
    displayName: 'Deploy to ${{ variables.environment }} K8S'
    dependsOn: []
    condition: and(succeeded(), eq(variables.canDeploy, true))
    jobs:
      - deployment: 'Deploy_to_${{ variables.environment }}'
        displayName: 'Deploy to ${{ variables.environment }} K8S'
        pool:
          name: $(selfHostedAgentPool)
        environment: '$(environment)'
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: Bash@3
                  name: helm_ded
                  inputs:
                    workingDirectory: '$(System.DefaultWorkingDirectory)'
                    targetType: 'inline'
                    script: |
                      ls -la
                    failOnStderr: true
                - task: Bash@3
                  name: helm_dependency_build
                  displayName: Helm dependency build
                  inputs:
                    workingDirectory: '$(System.DefaultWorkingDirectory)/helm/${{ variables.domain }}'
                    targetType: 'inline'
                    script: |
                      helm repo add cert-mounter-blueprint https://pagopa.github.io/aks-helm-cert-mounter-blueprint
                      helm dep build
                    failOnStderr: true
                - task: HelmDeploy@0
                  displayName: Helm upgrade
                  inputs:
                    kubernetesServiceEndpoint: ${{ variables.kubernetesServiceConnection }}
                    namespace: '$(deployNamespace)'
                    command: upgrade
                    chartType: filepath
                    chartPath: $(System.DefaultWorkingDirectory)/helm/${{ variables.domain }}
                    chartName: ${{ variables.helmReleaseName }}
                    releaseName: ${{ variables.helmReleaseName }}
                    valueFile: "$(System.DefaultWorkingDirectory)/helm/${{ variables.domain }}/values-${{ lower(variables.environment) }}.yaml"
                    install: true
                    waitForExecution: true
                    arguments: "--timeout 5m00s --debug"
